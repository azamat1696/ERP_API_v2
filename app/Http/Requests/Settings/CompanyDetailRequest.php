<?php

namespace App\Http\Requests\Settings;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class CompanyDetailRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'AuthorizedName' => 'required',
            'AuthorizedSurname' => 'required',
            'AuthorizedEmail' => 'required',
            'AuthorizedPhone' => 'required',
            'CompanyName' => 'required',
            'CompanyEmail' => 'required',
            'CompanyPhone' => 'required',
            'CompanyAddress' => 'required',
            'CompanyLogo' => 'sometimes',
            'CompanyVatNumber' => 'required',
            'CompanyWebSite' => 'required',
            'CompanyBusinessArea' => 'required',
            'CompanyStatus' => 'required',
            'CompanyID' => 'required',
            'CompanyAccessToken' => 'required'
        ];
    }

    public function getValidatorInstance(): Validator
    {
        $this->payload();
        return parent::getValidatorInstance(); // TODO: Change the autogenerated stub
    }

    protected function payload() {
        $this->merge([
            'CompanyStatus'  => $this->request->get('CompanyStatus') == 'true' ? 1 : 0,
            'CompanyID' => 123
        ]);

    }

    protected function failedValidation(Validator $validator)
    {
        $response = [
            'status' => 'failure',
            'status_code' => 400,
            'message' => 'Bad Request',
            'payload' =>  $validator->errors(),
        ];

        throw new HttpResponseException(response()->json($response, 400));

    }
}
