<?php

namespace App\Http\Requests\Settings;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class OfficesUpdateRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
 
        return [
            'id' => ['sometimes'],
            'cities_id' => ['required', 'exists:cities,id'],
            'districts_id' => ['required', 'exists:districts,id'],
            'OfficeName' => ['required'],
            'OfficePhone' => ['required' ],
            'OfficeEmail' => ['required' ],
            'OfficeAddress' => ['required'],
            'OfficeContacts' => ['sometimes'],
            'Status' => ['required'],
            'Positions' => ['required'],
            'OfficeWorkingPeriods' => ['required'],
        ];
    }

    public function getValidatorInstance(): Validator
    {
        $this->payload();
        return parent::getValidatorInstance(); // TODO: Change the autogenerated stub
    }

    protected function payload()
    {
        $this->merge([
            'Status' => $this->request->get('Status') === 'true' ? 1 : 0,
        ]);

    }

    protected function failedValidation(Validator $validator)
    {
        $response = [
            'status' => 'failure',
            'status_code' => 400,
            'message' => 'Bad Request',
            'payload' => $validator->errors(),
        ];

        throw new HttpResponseException(response()->json($response, 400));

    }
}
