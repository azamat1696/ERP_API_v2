<?php

namespace App\Http\Requests\Cars;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class CarsUpdateRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            
            'car_transmission_types_id' => ['required','exists:car_transmission_types,id'],
            'car_classes_id' => ['required','exists:car_classes,id'],
            'car_body_types_id' => ['required','exists:car_body_types,id'],
            'car_models_id' => ['required','exists:car_models,id'],
            'car_brands_id' => ['required','exists:car_brands,id'],
            'offices_id' => ['required','exists:offices,id'],
            'car_fuel_types_id' => ['required','exists:car_fuel_types,id'],
            
            'EngineCapacity'  => ['sometimes'],
            'CarColor' => ['sometimes'],
            'NumberOfSmallBags' => ['sometimes'],
            'Status' => ['sometimes'],
            'LicencePlate' => ['required','exists:cars,LicencePlate'],
            'NumberOfSeats'  => ['sometimes'],
            'Year' => ['required'],
            'CarTypeId' => ['required'],
            'NumberOfDoors'  => ['sometimes'],
             'Image'  => 'required',
            'NumberOfLargeBags'  => ['sometimes'],
            'CarAvailability' => ['sometimes'],
            'ExtraFields'  => ['sometimes'],
            'CarRemarks'  => ['sometimes'],
            //|image|mimes:jpeg,png,jpg|max:2048
            'id' => ['sometimes','exists:cars']
        ];
    }
    public function getValidatorInstance(): Validator
    {
        $this->payload();
        return parent::getValidatorInstance(); // TODO: Change the autogenerated stub
    }

    protected function payload() {
        $this->merge([
            'Status'  => $this->request->get('Status') == 'true' ? 1 : 0,
        ]);

    }
    protected function failedValidation(Validator $validator)
    {
        $response = [
            'status' => 'failure',
            'status_code' => 400,
            'message' => 'Bad Request1',
            'payload' =>  $validator->errors(),
        ];

        throw new HttpResponseException(response()->json($response, 400));

    }
}
