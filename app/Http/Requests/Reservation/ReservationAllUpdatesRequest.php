<?php

namespace App\Http\Requests\Reservation;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Carbon;
class ReservationAllUpdatesRequest extends FormRequest
{
    private $currentDateTime ;
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $this->currentDateTime = new \DateTime();
        return [
            'reservation_id' => ['required'],
            'PayReceiptNo' => ['sometimes'],
            'reservation_drivers' => ['sometimes'],
            'invoiceChecked' => ['sometimes'],
            'cars_id' => ['required','exists:cars,id'],
            'drop_office_id' => ['required','exists:offices,id'],
            'pickup_office_id' => ['required','exists:offices,id'],
            'customer_groups_id',['sometimes','exists:customer_groups,id'],
            'customers_id' => ['required','exists:customers,id'],
            'StartDateTime' => ['required'],
            'EndDateTime' => ['required'],
            'RentDays' => ['required'],
            'ReservationType' => ['required'],
            'CurrencyType' => ['required'],
            'CurrencySymbol' => ['required'],
            'CurrencyRate' => ['sometimes'],
            'SelectedPriceTitle' => ['required'],
            'DailyRentPrice' => ['required'],
            'RealDailyRentPrice' => ['required'],
            'TotalRentPrice' => ['required'],
            'TotalExtraServicesPrice' => ['sometimes'],
            'TotalPrice' => ['required'],
            'TotalPriceByCurrency' => ['required'],
            'PaymentMethod' => ['required'],
            'PaymentState' => ['required'],
            'TransactionNo' => ['sometimes'],
            'ExtraServices' => ['sometimes'],
            'ReservationStatus' => ['sometimes'],
            'ReservationRemarks' => ['sometimes'],
            'ExtendedDate' => ['sometimes'],
            'newTotalPrice' => ['sometimes'],
        ];
    }
    public function getValidatorInstance(): Validator
    {
        $this->payload();
        return parent::getValidatorInstance(); // TODO: Change the autogenerated stub
    }

    protected function payload()
    {
        $this->merge([
            //'Status' => $this->request->get('Status') ? 1 : 0,
//            'Status' => $this->request->get('Status') === 'true' ? 1 : 0,
        ]);

    }

    protected function failedValidation(Validator $validator)
    {
        $response = [
            'status' => 'failure',
            'status_code' => 400,
            'message' => 'Bad Request',
            'payload' => $validator->errors(),
        ];

        throw new HttpResponseException(response()->json($response, 400));

    }
}
