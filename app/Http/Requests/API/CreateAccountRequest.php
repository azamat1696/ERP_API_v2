<?php

namespace App\Http\Requests\API;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Hash;

class CreateAccountRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    public function validated(): array
    {
        if ($this->has('password')) {
            return array_merge(parent::validated(), ['password' => Hash::make($this->input('password'))]);
        }
        return parent::validated();
    }
    
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        
        
        
        
        
        return [
//            "client_type_id" => "required",
//            "client_group_id" => "required",
            "name" => "required|min:3|max:100",
            "surname" => "required|min:3|max:100",
            "email" => "required|email|unique:customers",
            "phone" => "required|min:10|max:12|unique:customers",
            "password" => "required|min:4|confirmed|required_with:password_confirmation",
            "password_confirmation" => "required|min:4",
            "gender" => "required",
            "driving_license_no" =>"required|min:6|unique:customer_documents,DocumentNumber",
            "passport_no" => "required|min:6|unique:customer_documents,DocumentNumber",
//            "country" => "required",
//            "state" => "required",
//            "city" => "required",
            "address" => "required|min:10",
            "email_verified_hash" => "required"
        ];
    }

    protected function failedValidation(Validator $validator)
    {
        $response = [
            'status' => false,
            'status_code' => 400,
            'message' => 'Bad Request',
            'errors' => $validator->errors(),
        ];

        throw new HttpResponseException(response()->json($response, 400));
    }

    public function getValidatorInstance(): Validator
    {
        $this->payload();
        return parent::getValidatorInstance(); // TODO: Change the autogenerated stub
    }

 
    protected function payload() {
        $this->merge([
            'email_verified_hash' => random_int(100000, 999999)
        ]);
    }
}
